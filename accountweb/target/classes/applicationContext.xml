<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">
	<!-- 注解一定要配置，不然不起作用 -->
	<cache:annotation-driven />
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
			    <value>file:/opt/conf/kq_accountWeb_constants.properties</value> 
				<!-- <value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
				<value>classpath:config.properties</value> -->
			</list>
		</property>
	</bean>
	<!-- 自动扫描包 ,将带有注解的类 纳入spring容器管理 -->
	<context:component-scan base-package="cn.eeepay" />

	<!-- 配置使Spring采用CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

        <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
                init-method="init" destroy-method="close">
                <property name="url" value="${master.db.url}" />
                <property name="username" value="${master.db.userName}" />
                <property name="password" value="${master.db.password}" />
                <!-- 初始化连接大小 -->
                <property name="initialSize" value="20" />
                <!-- 连接池最大使用连接数量 -->
                <property name="maxActive" value="100" />
                <!-- 连接池最大空闲 -->
                <property name="maxIdle" value="50" />
                <!-- 连接池最小空闲 -->
                <property name="minIdle" value="10" />
                <!-- 获取连接最大等待时间 -->
                <property name="maxWait" value="60000" />
                <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
                <property name="timeBetweenEvictionRunsMillis" value="60000" />
                <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
                <property name="minEvictableIdleTimeMillis" value="300000" />
                <property name="validationQuery" value="SELECT 'x'" />
                <property name="testWhileIdle" value="true" />
                <property name="testOnBorrow" value="true" />
                <property name="testOnReturn" value="false" />
                <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
                <property name="poolPreparedStatements" value="true" />
                <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
                <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
                <property name="filters" value="stat" />
                <property name="removeAbandoned" value="false" />
                <!--property name="removeAbandonedTimeout" value="1800" /-->
                <!-- <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="log-filter" />
            </list>
        </property> -->
        </bean>

	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${nposp.db.url}" />
		<property name="username" value="${nposp.db.userName}" />
		<property name="password" value="${nposp.db.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="20" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="100" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="500" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="10" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
		<!-- <property name="proxyFilters">  
            <list>  
                <ref bean="stat-filter" />  
                <ref bean="log-filter" />  
            </list>   
    	</property> -->
	</bean>
	
	
	<bean id="dataSource3" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${perAgent.db.url}" />
		<property name="username" value="${perAgent.db.userName}" />
		<property name="password" value="${perAgent.db.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="20" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="100" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="500" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="10" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
		<!-- <property name="proxyFilters">  
            <list>  
                <ref bean="stat-filter" />  
                <ref bean="log-filter" />  
            </list>   
    	</property> -->
	</bean>
	
	<!-- 慢SQL记录 *start* -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">  
	        <property name="mergeSql" value="true" />  
	        <property name="slowSqlMillis" value="1000" />  
	        <property name="logSlowSql" value="true" />  
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">  
        <!-- <property name="resultSetLogEnabled" value="false" /> -->  
        <!-- <property name="statementExecutableSqlLogEnable" value="true" /> -->  
	</bean> 
	<!-- 慢SQL记录 *end* -->
	
	<!-- ===================数据源1============================================= -->
	
	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource1" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:cn/eeepay/framework/dao/bill/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="typeAliasesPackage" value="cn.eeepay.framework.model.bill" />
		
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory1" />
		<property name="basePackage" value="cn.eeepay.framework.dao.bill" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource1" />
		<qualifier value="bill" />
	</bean>
	<!-- 全注解方式 需加上@Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- ===========================数据源2======================================= -->
	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource2" />
		<!-- 自动扫描mapping.xml文件-->
		<property name="mapperLocations" value="classpath:cn/eeepay/framework/dao/nposp/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="typeAliasesPackage" value="cn.eeepay.framework.model.nposp" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2"/>
		<property name="basePackage" value="cn.eeepay.framework.dao.nposp" />
	</bean>
	
	<bean id="transactionManager2"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource2" />
		<qualifier value="nposp" />
	</bean>
	<!-- 全注解方式 -->
	<tx:annotation-driven transaction-manager="transactionManager2" />
	
	<!-- ===========================数据源3======================================= -->
	<bean id="sqlSessionFactory3" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource3" />
		<!-- 自动扫描mapping.xml文件-->
		<property name="mapperLocations" value="classpath:cn/eeepay/framework/dao/peragent/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="typeAliasesPackage" value="cn.eeepay.framework.model.peragent" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory3"/>
		<property name="basePackage" value="cn.eeepay.framework.dao.peragent" />
	</bean>
	
	<bean id="transactionManager3"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource3" />
		<qualifier value="peragent" />
	</bean>
	<!-- 全注解方式 -->
	<tx:annotation-driven transaction-manager="transactionManager3" />

	<!-- redis 配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
	</bean>

	<!-- Redis Connection Factory -->
	<bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pass}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<!-- Redis Template -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnFactory">
	</bean>

	<!-- 配置缓存 -->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg ref="redisTemplate" />
		<!-- 	默认有效期5分钟-->
		<property name="defaultExpiration" value="300" />
	</bean> 

</beans>
